"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ClassicEditor = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _classiceditor = require("@ckeditor/ckeditor5-editor-classic/src/classiceditor");

var _classiceditor2 = _interopRequireDefault(_classiceditor);

var _essentials = require("@ckeditor/ckeditor5-essentials/src/essentials");

var _essentials2 = _interopRequireDefault(_essentials);

var _autoformat = require("@ckeditor/ckeditor5-autoformat/src/autoformat");

var _autoformat2 = _interopRequireDefault(_autoformat);

var _bold = require("@ckeditor/ckeditor5-basic-styles/src/bold");

var _bold2 = _interopRequireDefault(_bold);

var _italic = require("@ckeditor/ckeditor5-basic-styles/src/italic");

var _italic2 = _interopRequireDefault(_italic);

var _blockquote = require("@ckeditor/ckeditor5-block-quote/src/blockquote");

var _blockquote2 = _interopRequireDefault(_blockquote);

var _ckfinder = require("@ckeditor/ckeditor5-ckfinder/src/ckfinder");

var _ckfinder2 = _interopRequireDefault(_ckfinder);

var _easyimage = require("@ckeditor/ckeditor5-easy-image/src/easyimage");

var _easyimage2 = _interopRequireDefault(_easyimage);

var _heading = require("@ckeditor/ckeditor5-heading/src/heading");

var _heading2 = _interopRequireDefault(_heading);

var _image = require("@ckeditor/ckeditor5-image/src/image");

var _image2 = _interopRequireDefault(_image);

var _imagecaption = require("@ckeditor/ckeditor5-image/src/imagecaption");

var _imagecaption2 = _interopRequireDefault(_imagecaption);

var _imagestyle = require("@ckeditor/ckeditor5-image/src/imagestyle");

var _imagestyle2 = _interopRequireDefault(_imagestyle);

var _imagetoolbar = require("@ckeditor/ckeditor5-image/src/imagetoolbar");

var _imagetoolbar2 = _interopRequireDefault(_imagetoolbar);

var _imageupload = require("@ckeditor/ckeditor5-image/src/imageupload");

var _imageupload2 = _interopRequireDefault(_imageupload);

var _simpleuploadadapter = require("@ckeditor/ckeditor5-upload/src/adapters/simpleuploadadapter");

var _simpleuploadadapter2 = _interopRequireDefault(_simpleuploadadapter);

var _indent = require("@ckeditor/ckeditor5-indent/src/indent");

var _indent2 = _interopRequireDefault(_indent);

var _link = require("@ckeditor/ckeditor5-link/src/link");

var _link2 = _interopRequireDefault(_link);

var _list = require("@ckeditor/ckeditor5-list/src/list");

var _list2 = _interopRequireDefault(_list);

var _mediaembed = require("@ckeditor/ckeditor5-media-embed/src/mediaembed");

var _mediaembed2 = _interopRequireDefault(_mediaembed);

var _paragraph = require("@ckeditor/ckeditor5-paragraph/src/paragraph");

var _paragraph2 = _interopRequireDefault(_paragraph);

var _table = require("@ckeditor/ckeditor5-table/src/table");

var _table2 = _interopRequireDefault(_table);

var _tabletoolbar = require("@ckeditor/ckeditor5-table/src/tabletoolbar");

var _tabletoolbar2 = _interopRequireDefault(_tabletoolbar);

var _alignment = require("@ckeditor/ckeditor5-alignment/src/alignment");

var _alignment2 = _interopRequireDefault(_alignment);

var _horizontalline = require("@ckeditor/ckeditor5-horizontal-line/src/horizontalline");

var _horizontalline2 = _interopRequireDefault(_horizontalline);

var _wordcount = require("@ckeditor/ckeditor5-word-count/src/wordcount");

var _wordcount2 = _interopRequireDefault(_wordcount);

var _ckeditor5React = require("@ckeditor/ckeditor5-react");

var _ckeditor5React2 = _interopRequireDefault(_ckeditor5React);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ClassicEditor = exports.ClassicEditor = function (_ClassicEditorBase) {
  _inherits(ClassicEditor, _ClassicEditorBase);

  function ClassicEditor() {
    _classCallCheck(this, ClassicEditor);

    return _possibleConstructorReturn(this, (ClassicEditor.__proto__ || Object.getPrototypeOf(ClassicEditor)).apply(this, arguments));
  }

  return ClassicEditor;
}(_classiceditor2.default);

var CKEditor = function CKEditor(_ref) {
  var input = _ref.input,
      value = _ref.value,
      headers = _ref.headers,
      uploadUrl = _ref.uploadUrl,
      imageplugin = _ref.imageplugin,
      headingplugin = _ref.headingplugin,
      mediaplugin = _ref.mediaplugin,
      tableplugin = _ref.tableplugin,
      _onUpdate = _ref.onUpdate,
      _onFocus = _ref.onFocus,
      containerStyles = _ref.containerStyles;

  var val = input.value || value;

  var _React$useState = _react2.default.useState(val),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      data = _React$useState2[0],
      setData = _React$useState2[1];

  var Editor = _react2.default.useRef(ClassicEditor).current;

  var imageplugins = imageplugin ? [_easyimage2.default, _image2.default, _imagecaption2.default, _imagestyle2.default, _imagetoolbar2.default, _imageupload2.default] : [];

  var mediaplugins = mediaplugin ? [_mediaembed2.default] : [];

  var headingplugins = headingplugin ? [_heading2.default] : [];

  var tableplugins = tableplugin ? [_table2.default, _tabletoolbar2.default] : [];

  var imagestoolbar = imageplugin ? ["insertimage", "imageStyleAlignLeft", "imageStyleFull", "imageStyleAlignRight"] : [];
  var headingtoolbar = headingplugin ? ["headings"] : [];

  Editor.builtinPlugins = [_essentials2.default, _autoformat2.default, _bold2.default, _italic2.default, _blockquote2.default, _ckfinder2.default].concat(headingplugins, imageplugins, mediaplugins, [_simpleuploadadapter2.default, _indent2.default, _link2.default, _list2.default, _paragraph2.default], tableplugins, [_alignment2.default, _horizontalline2.default, _wordcount2.default]);

  Editor.defaultConfig = {
    toolbar: {
      items: [].concat(_toConsumableArray(headingplugin ? ["heading", "|"] : []), ["bold", "italic", "link", "bulletedList", "numberedList", "alignment", "|", "indent", "outdent", "|"], _toConsumableArray(imageplugin ? ["imageUpload"] : []), imagestoolbar, ["blockQuote"], _toConsumableArray(tableplugin ? ["insertTable"] : []), _toConsumableArray(mediaplugin ? ["mediaEmbed"] : []), ["undo", "redo", "horizontalLine"])
    },
    image: imageplugin ? {
      toolbar: ["imageTextAlternative", "|", "imageStyleAlignLeft", "imageStyleFull", "imageStyleAlignRight"],

      styles: [
      // This option is equal to a situation where no style is applied.
      "imageStyleFull",

      // This represents an image aligned to left.
      "imageStyleAlignLeft",

      // This represents an image aligned to right.
      "imageStyleAlignRight"]
    } : {},
    table: tableplugin ? {
      contentToolbar: ["tableColumn", "tableRow", "mergeTableCells"]
    } : {},
    simpleUpload: {
      // The URL that the images are uploaded to.
      uploadUrl: uploadUrl,

      // Headers sent along with the XMLHttpRequest to the upload server.
      headers: _extends({}, headers)
    },
    wordCount: {
      onUpdate: function onUpdate(stats) {
        // Prints the current content statistics.
        _onUpdate(stats);
      }
    },
    // This value must be kept in sync with the language defined in webpack.config.js.
    language: "en"
  };

  _react2.default.useEffect(function () {
    if (val) {
      setData(val);
    }
  }, [val]);

  return _react2.default.createElement(
    "div",
    {
      style: _extends({
        display: "flex",
        flex: 1
      }, containerStyles)
    },
    _react2.default.createElement(_ckeditor5React2.default, {
      editor: Editor,
      data: data,
      onInit: function onInit(editor) {
        // You can store the "editor" and use when it is needed.
      },
      onChange: function (_onChange) {
        function onChange(_x, _x2) {
          return _onChange.apply(this, arguments);
        }

        onChange.toString = function () {
          return _onChange.toString();
        };

        return onChange;
      }(function (event, editor) {
        var data = editor.getData();
        if (typeof input.onChange === "function") {
          input.onChange(data);
        }
        if (typeof onChange === "function") {
          onChange(data);
        }
      }),
      onBlur: function onBlur(event, editor) {
        if (typeof input.onBlur === "function") {
          input.onBlur();
        }
      },
      onFocus: function onFocus(event, editor) {
        if (typeof _onFocus === "function") {
          _onFocus();
        }
      }
    })
  );
};

CKEditor.defaultProps = {
  uploadUrl: "/fileapi/upload/editorimage",
  value: "<p>&nbsp;</p>",
  input: {
    value: "<p>&nbsp;</p>",
    onChange: function onChange() {},
    onBlur: function onBlur() {}
  },
  headers: {},
  meta: {},
  onChange: function onChange() {},
  onUpdate: function onUpdate() {},
  onFocus: function onFocus() {},
  imageplugin: false,
  headingplugin: false,
  mediaplugin: false,
  tableplugin: false,
  containerStyles: {}
};
exports.default = CKEditor;