'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var UploadAdapter = function () {
  function UploadAdapter(loader, url, t) {
    _classCallCheck(this, UploadAdapter);

    this.loader = loader;
    this.url = url;

    this.t = t;
  }

  _createClass(UploadAdapter, [{
    key: 'upload',
    value: function upload() {
      var _this = this;

      return new Promise(function (resolve, reject) {
        _this._initRequest();
        _this._initListeners(resolve, reject);
        _this._sendRequest();
      });
    }
  }, {
    key: 'abort',
    value: function abort() {
      if (this.xhr) {
        this.xhr.abort();
      }
    }
  }, {
    key: '_initRequest',
    value: function _initRequest() {
      var xhr = this.xhr = new XMLHttpRequest();

      xhr.open('POST', this.url, true);
      xhr.responseType = 'json';
    }
  }, {
    key: '_initListeners',
    value: function _initListeners(resolve, reject) {
      var xhr = this.xhr;
      var loader = this.loader;
      var t = this.t;
      var genericError = t('Cannot upload file:') + (' ' + loader.file.name + '.');

      xhr.addEventListener('error', function () {
        return reject(genericError);
      });
      xhr.addEventListener('abort', function () {
        return reject();
      });
      xhr.addEventListener('load', function () {
        var response = xhr.response;

        if (!response || !response.uploaded) {
          return reject(response && response.error && response.error.message ? response.error.message : genericError);
        }

        resolve({
          default: response.url
        });
      });

      // Upload progress when it's supported.
      /* istanbul ignore else */
      if (xhr.upload) {
        xhr.upload.addEventListener('progress', function (evt) {
          if (evt.lengthComputable) {
            loader.uploadTotal = evt.total;
            loader.uploaded = evt.loaded;
          }
        });
      }
    }
  }, {
    key: '_sendRequest',
    value: function _sendRequest() {
      // Prepare form data.
      var data = new FormData();
      data.append('upload', this.loader.file);
      // Send request.
      this.xhr.send(data);
    }
  }]);

  return UploadAdapter;
}();

exports.default = UploadAdapter;