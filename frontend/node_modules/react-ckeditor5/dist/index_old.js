"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _classiceditor = require("@ckeditor/ckeditor5-editor-classic/src/classiceditor");

var _classiceditor2 = _interopRequireDefault(_classiceditor);

var _uploadadapter = require("@ckeditor/ckeditor5-adapter-ckfinder/src/uploadadapter");

var _uploadadapter2 = _interopRequireDefault(_uploadadapter);

var _essentials = require("@ckeditor/ckeditor5-essentials/src/essentials");

var _essentials2 = _interopRequireDefault(_essentials);

var _simpleuploadadapter = require("@ckeditor/ckeditor5-upload/src/simpleuploadadapter");

var _simpleuploadadapter2 = _interopRequireDefault(_simpleuploadadapter);

var _autoformat = require("@ckeditor/ckeditor5-autoformat/src/autoformat");

var _autoformat2 = _interopRequireDefault(_autoformat);

var _bold = require("@ckeditor/ckeditor5-basic-styles/src/bold");

var _bold2 = _interopRequireDefault(_bold);

var _italic = require("@ckeditor/ckeditor5-basic-styles/src/italic");

var _italic2 = _interopRequireDefault(_italic);

var _blockquote = require("@ckeditor/ckeditor5-block-quote/src/blockquote");

var _blockquote2 = _interopRequireDefault(_blockquote);

var _easyimage = require("@ckeditor/ckeditor5-easy-image/src/easyimage");

var _easyimage2 = _interopRequireDefault(_easyimage);

var _heading = require("@ckeditor/ckeditor5-heading/src/heading");

var _heading2 = _interopRequireDefault(_heading);

var _image = require("@ckeditor/ckeditor5-image/src/image");

var _image2 = _interopRequireDefault(_image);

var _imagecaption = require("@ckeditor/ckeditor5-image/src/imagecaption");

var _imagecaption2 = _interopRequireDefault(_imagecaption);

var _imagestyle = require("@ckeditor/ckeditor5-image/src/imagestyle");

var _imagestyle2 = _interopRequireDefault(_imagestyle);

var _imagetoolbar = require("@ckeditor/ckeditor5-image/src/imagetoolbar");

var _imagetoolbar2 = _interopRequireDefault(_imagetoolbar);

var _link = require("@ckeditor/ckeditor5-link/src/link");

var _link2 = _interopRequireDefault(_link);

var _list = require("@ckeditor/ckeditor5-list/src/list");

var _list2 = _interopRequireDefault(_list);

var _paragraph = require("@ckeditor/ckeditor5-paragraph/src/paragraph");

var _paragraph2 = _interopRequireDefault(_paragraph);

var _imageupload = require("@ckeditor/ckeditor5-upload/src/imageupload");

var _imageupload2 = _interopRequireDefault(_imageupload);

var _placeholder = require("@ckeditor/ckeditor5-engine/src/view/placeholder");

var _placeholder2 = _interopRequireDefault(_placeholder);

require("./ckeditor.css");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CKEditor = function (_Component) {
  _inherits(CKEditor, _Component);

  _createClass(CKEditor, null, [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, prevState) {
      var val = "" + (nextProps.input.value || nextProps.value);
      if (val !== prevState.defaultValue) {
        return _extends({}, prevState, { defaultValue: val });
      }

      return _extends({}, prevState);
    }
  }]);

  function CKEditor(props) {
    _classCallCheck(this, CKEditor);

    var _this = _possibleConstructorReturn(this, (CKEditor.__proto__ || Object.getPrototypeOf(CKEditor)).call(this, props));

    _this.onInitialized = function () {
      if (_this.editor && _this.editor.setData && !_this.state.firstUpdate) {
        var editordata = _this.editor.getData();
        if (editordata !== _this.state.defaultValue) {
          _this.editor.setData(_this.state.defaultValue);
          _this.setState({ firstUpdate: true });
        }
      }

      setTimeout(function () {
        _this.setState({ firstUpdate: true });
      }, 1000);
    };

    _this.componentDidMount = function () {
      var imageplugins = _this.props.imageplugin ? [_easyimage2.default, _image2.default, _imagecaption2.default, _imagestyle2.default, _imagetoolbar2.default, _imageupload2.default] : [];

      var headingplugin = _this.props.headingplugin ? [_heading2.default] : [];

      var imagestoolbar = _this.props.imageplugin ? ["insertimage", "imageStyleAlignLeft", "imageStyleFull", "imageStyleAlignRight"] : [];
      var headingtoolbar = _this.props.headingplugin ? ["headings"] : [];

      _classiceditor2.default.create(_this.el, {
        plugins: [_essentials2.default, UploadadapterPlugin].concat(headingplugin, [_autoformat2.default, _bold2.default, _italic2.default, _blockquote2.default, _link2.default, _list2.default, _paragraph2.default], imageplugins),
        toolbar: [].concat(headingtoolbar, ["bold", "italic", "link", "bulletedList", "numberedList", "blockQuote"], imagestoolbar),
        image: _this.props.imageplugin ? {
          // You need to configure the image toolbar too, so it uses the new style buttons.
          toolbar: ["imageTextAlternative", "|", "imageStyleAlignLeft", "imageStyleFull", "imageStyleAlignRight"],

          styles: [
          // This option is equal to a situation where no style is applied.
          "imageStyleFull",

          // This represents an image aligned to left.
          "imageStyleAlignLeft",

          // This represents an image aligned to right.
          "imageStyleAlignRight"]
        } : {},
        simpleUpload: {
          // The URL that the images are uploaded to.
          uploadUrl: _this.props.uploadUrl,

          // Headers sent along with the XMLHttpRequest to the upload server.
          headers: _extends({
            "X-CSRF-TOKEN": "CSFR-Token",
            Authorization: "Bearer <JSON Web Token>"
          }, _this.props.headers)
        },
        placeholder: "Type here..."
      }).then(function (editor) {
        _this.editor = editor;
        // console.log( 'Editor was initialized', editor );
        // const arr = Array.from(editor.ui.componentFactory.names());

        // console.log(arr); // toolbar
        var viewDoc = editor.editing.view;
        _this.editor.document.on("change", function () {
          var data = _this.editor.getData();
          _this.onChange(data);
        });

        _this.onInitialized();
      }).catch(function (error) {
        console.log(error);
      });
    };

    _this.editor = null;
    _this.el = null;
    _this.state = {
      defaultValue: "<p>&nbsp;</p>",
      firstUpdate: false
    };
    return _this;
  }

  _createClass(CKEditor, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      if (this.editor && this.editor.setData && !this.state.firstUpdate) {
        var editordata = this.editor.getData();
        if (editordata !== this.state.defaultValue) {
          this.editor.setData(this.state.defaultValue);
          this.setState({ firstUpdate: true });
        }
      }
    }
  }, {
    key: "onChange",
    value: function onChange(data) {
      var _this2 = this;

      this.setState({ defaultValue: data }, function () {
        _this2.props.input.onChange(data);
        _this2.props.onChange(data);
        _this2.props.input.onBlur();
      });
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.setState({ firstUpdate: false });
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var meta = this.props.meta;


      return _react2.default.createElement(
        "div",
        { className: "ck-editor-container" },
        _react2.default.createElement("div", {
          ref: function ref(el) {
            _this3.el = el;
          }
        })
      );
    }
  }]);

  return CKEditor;
}(_react.Component);

CKEditor.defaultProps = {
  uploadUrl: "/fileapi/upload/editorimage",
  value: "<p>&nbsp;</p>",
  input: {
    value: "<p>&nbsp;</p>",
    onChange: function onChange() {},
    onBlur: function onBlur() {}
  },
  meta: {},
  onChange: function onChange() {},
  imageplugin: false,
  headingplugin: false
};
exports.default = CKEditor;