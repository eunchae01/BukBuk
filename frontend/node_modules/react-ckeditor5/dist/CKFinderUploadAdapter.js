'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _plugin = require('@ckeditor/ckeditor5-core/src/plugin');

var _plugin2 = _interopRequireDefault(_plugin);

var _filerepository = require('@ckeditor/ckeditor5-upload/src/filerepository');

var _filerepository2 = _interopRequireDefault(_filerepository);

var _UploadAdapter = require('./UploadAdapter');

var _UploadAdapter2 = _interopRequireDefault(_UploadAdapter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CKFinderUploadAdapter = function (_Plugin) {
  _inherits(CKFinderUploadAdapter, _Plugin);

  function CKFinderUploadAdapter() {
    _classCallCheck(this, CKFinderUploadAdapter);

    return _possibleConstructorReturn(this, (CKFinderUploadAdapter.__proto__ || Object.getPrototypeOf(CKFinderUploadAdapter)).apply(this, arguments));
  }

  _createClass(CKFinderUploadAdapter, [{
    key: 'init',
    value: function init() {
      var _this2 = this;

      var url = this.editor.config.get('ckfinder.uploadUrl');

      if (!url) {
        return;
      }
      this.editor.plugins.get(_filerepository2.default).createUploadAdapter = function (loader) {
        return new _UploadAdapter2.default(loader, url, _this2.editor.t);
      };
    }
  }], [{
    key: 'requires',
    get: function get() {
      return [_filerepository2.default];
    }
  }, {
    key: 'pluginName',
    get: function get() {
      return 'CKFinderUploadAdapter';
    }
  }]);

  return CKFinderUploadAdapter;
}(_plugin2.default);

exports.default = CKFinderUploadAdapter;